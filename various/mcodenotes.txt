+------------------+--------------+------+------------------------------------------------+
| Code             | MCODE        | Line | Note                                           |
+------------------+--------------+------+------------------------------------------------+
| begin            | 6 0 6        | 10   | 0 0 0 n i h + # var of main                    |
+------------------+--------------+------+------------------------------------------------+
| Const n = 13;    | 1 0 13       | 0    | Create const “13”                              |
|				           | 4 0 4 	   	  |      | Put in var position 1 (const come first!)      |
+------------------+--------------+------+------------------------------------------------+
| i := 3;          | 1 0 3        | 11   | Create "3"                                     |
| var i;           | 4 0 5        | 1    | put in var position 2                          |
+------------------+--------------+------+------------------------------------------------+
| h := 0;          | 1 0 0        | 12   | Create "0"                                     |
| var h;           | 4 0 6        | 1    | put in var position 3                          |
+------------------+--------------+------+------------------------------------------------+
| call sub;        | 5 0 2        | 13   | Call(L:prev record #)(# line where code starts)|
+------------------+--------------+------+------------------------------------------------+
| procedure sub;   |              | 2    | jump to begin of proc                          |
+------------------+--------------+------+------------------------------------------------+
| begin            | 6 0 6        | 5    | 0 0 0 k j h (3+# of new vars)                  |
| var j,h          |              | 4    |                                                |
+------------------+--------------+------+------------------------------------------------+
| const k = 7;     | 1 0 7        | 3    | create const k = 7                             |
|                  | 4 0 4        |      | put in var pos 1                               |
+------------------+--------------+------+------------------------------------------------+
| j := n;          | 3 1 4        | 6    | retrieve n's value, 1 AR down                  |
|                  | 4 0 5        |      | store into J                                   |
+------------------+--------------+------+------------------------------------------------+
| i := 1;          | 1 0 1        | 7    | put "1" onto stack                             |
|                  | 4 1 5        |      | store one in pos 2, 1 AR down                  |
+------------------+--------------+------+------------------------------------------------+
| h := k;          | 3 0 5        | 8    | retrieve k's value, 0 AR down                  |
|                  | 4 0 6        |      | store into LOCAL h                             |
+------------------+--------------+------+------------------------------------------------+
| end;             | 2 0 0        | 9    | return                                         |
+------------------+--------------+------+------------------------------------------------+
| end.             | 9 0 2        |      | halt (end program)                             |
+------------------+--------------+------+------------------------------------------------+

